#!/usr/bin/env python
# coding: utf-8

#  –ì–∞—Ñ–Ω–∏ –î–∞–Ω–∏–∏–ª, 306 –≥—Ä—É–ø–ø–∞, —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ú–ì–£

# ## –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏

# –ò—Å–ø–æ–ª—å–∑—É—è —Å—Ö–µ–º—É –±–µ–≥—É—â–µ–≥–æ —Å—á–µ—Ç–∞ –∏ –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã, —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∫–≤–∞–∑–∏–ª–∏–Ω–µ–π–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–Ω–æ—Å–∞:

# $$
# \left\{\begin{aligned}
# \frac{\partial u}{\partial t} + \frac{2+\cos u}{1 + (2u + 1 + \sin u)^2} \frac{\partial u}{\partial x} = 0, \ ~ 0 < x \leq 1, \\
# u(x,0) = \cos \frac{\pi x}{2}, \\
# u(0,t) = 1 + \frac{1}{2} \arctan t.
# \end{aligned}\\
# \right. $$
# 
# 

# ## –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

# ### –ò—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

# –í —Ç–æ—á–∫–∞—Ö –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ü–∏–π –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑—Ä—ã–≤–Ω—ã–º. –ü–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –±—É–¥—É—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è –ø—Ä–æ–µ–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤–∏–¥ 
# $~~dt=\frac{1 + (2u + 1 + \sin u)^2}{2+\cos u}dx$
# 
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ.
# 
# $\int_{t_o}^{t}dt=\int_{x_o}^{x} \frac{1 + (2u + 1 + \sin u)^2}{2+\cos u}dx $
# 
# $t=\frac{1 + (2u_0 + 1 + \sin u_0)^2}{2+\cos u_0}(x-x_0)+t_0$
# 
# –í–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è –Ω–∞—á–∞–ª—å–Ω—ã–º –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–≤—É—Ö —Å–µ–º–µ–π—Å—Ç–≤ –∫—Ä–∏–≤—ã—Ö:
# 
# 1) $~~t_0=0: ~~~~~ t=\frac{1 + (2\cos \frac{\pi x_0}{2} + 1 + \sin (\cos \frac{\pi x_0}{2})^2)}{2+\cos (\cos \frac{\pi x_0}{2})}(x-x_0)$
# 
# 2) $~~x_0=0: ~~~~~ t=\frac{1 + (3 + \arctan t_0 + \sin (1 + \frac{1}{2} \arctan t_0))^2}{2+\cos (1 + \frac{1}{2} \arctan t_0)}x+t_0$
# 
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∫—Ä–∏–≤—ã—Ö.
# 
# –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–µ–¥–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ:
# 
# $C(u) = \frac{2+\cos u}{1 + (2u + 1 + \sin u)^2}$

# ### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –ù–µ–π–º–∞–Ω–∞

# –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ $ \frac{\partial u}{\partial x} $ –í–æ–∑—å–º—ë–º –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É $(x_o, t_0)$.
# –¢–æ–≥–¥–∞ —Ä–∞–∑–Ω–æ—Å—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤–∏–¥ $$\frac{y^{m+1}_n - y^m_{n} + y^{m+1}_{n+1} - y^m_{n+1}}{2h_t} - \frac{y^{m+1}_{n} - y^{m}_{n} + Cy^{m+1}_{n+1} - y^{m}_{n+1}}{2h_x}=0$$
# 
# –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤ –≤–∏–¥–µ $y^{m+1}_{n+1} = \lambda^m e^{i\alpha n}$. –ü–æ–¥—Å—Ç–∞–≤–ª—è—è, –ø–æ–ª—É—á–∞–µ–º:
# 
# $\lambda = \frac{1+e^{i \alpha} - \frac{C h_t}{h_x}(e^{i \alpha} - 1)}{1+e^{i \alpha} + \frac{C h_t}{h_x}(e^{i \alpha} - 1)}$
# 
# –ò–∑ —ç—Ç–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–Ω–æ, —á—Ç–æ —É—Å–ª–æ–≤–∏–µ |ùúÜ(ùõº)|‚â§1 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –ª—é–±—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —à–∞–≥–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –ù–µ–π–º–∞–Ω–∞ —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ª—é–±—ã—Ö œÑ –∏ ‚Ñé.

# ## –ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

# ### –°–µ—Ç–∫–∞

# –í–≤–µ–¥–µ–º –≤ –æ–±–ª–∞—Å—Ç–∏ $\Omega=\{(x,t):0\leq x<4,~~0<t<4\} $ —Å–µ—Ç–∫—É —Å —à–∞–≥–æ–º $h_x$ –ø–æ $x$ –∏ —à–∞–≥–æ–º $h_t$ –ø–æ $t$:
# \begin{eqnarray}
# \omega_{h_x, ~ h_t}=\begin{cases}
# x_n=n\cdot h_x, ~~h_x=\frac{1}{N}, ~~n=\overline{0, N}\\
# t_m=m\cdot h_t, ~~h_t=\frac{1}{M}, ~~m=\overline{0, M}
# \end{cases}
# \end{eqnarray}
# 
# –ù–∞ $\omega_{h_x, ~ h_t}$ –±—É–¥–µ–º —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–µ—Ç–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é $y^m_{n}=u(x_n,t_m)$

# ## –®–∞–±–ª–æ–Ω
# 

# –ü–µ—Ä–µ–ø–∏—à–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, –ø—Ä–∏–≤–µ–¥—è –µ–≥–æ –∫ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ç–Ω–æ–º—É –≤–∏–¥—É: 
# 
# $$\frac{\partial u}{\partial t} + \frac{\partial (\arctan (2u + \sin u +1))}{\partial x} = 0 $$
# 
# –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–µ–¥–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ:
# 
# $C\_i(u) = \arctan (2u + \sin u +1)$ - –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ $C(u)$
# 
# –î–ª—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–π –∑–∞–¥–∞—á–∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [—á–µ—Ç—ã—Ä–µ—Ö—Ç–æ—á–µ—á–Ω—ã–π —à–∞–±–ª–æ–Ω](http://math.phys.msu.ru/data/374/tema5.pdf). –û–Ω –±–µ–∑—É—Å–ª–æ–≤–Ω–æ —É—Å—Ç–æ–π—á–∏–≤ –∏ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ $ O({h_x}^2 + {h_t}^2)$.
# 
# –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Ä–∞–∑–Ω–æ—Å—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –∑–∞–¥–∞—á–∏ –∏–º–µ–µ—Ç –≤–∏–¥:
# 
# $$\frac{y^{m+1}_n - y^m_{n} + y^{m+1}_{n+1} - y^m_{n+1}}{2h_t} - \frac{C\_i(y^{m+1}_{n}) - C\_i(y^{m}_{n}) + C\_i(y^{m+1}_{n+1}) - C\_i(y^{m}_{n+1})}{2h_x}=0$$
# 
# –ü—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ –ù—å—é—Ç–æ–Ω–∞ –Ω–∞–π–¥–µ–º –∫–æ—Ä–µ–Ω—å —ç—Ç–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è - $y^{m+1}_{n+1}$ –∏ –ø–µ—Ä–µ–π–¥–µ–º –∫ –≤—ã—á–∏—Å–ª–µ–Ω–∏—é
# —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏
# 
# –¢–∞–∫–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –≥—Ä–∞–Ω–∏—á–Ω–æ–µ —É—Å–ª–æ–≤–∏—è:
# 
# $$\left\{\begin{aligned} 
# y^0_n= \cos \frac{\pi n h_x}{2}\\
# y^{m}_0 = 1 + \frac{1}{2} \arctan(m h_t)
# \end{aligned}\\
# \right. $$
# 

# ## –ö–æ–¥

# ### –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

# In[1]:


import numpy as np

import plotly
import plotly.graph_objs as go

import matplotlib
import matplotlib.pyplot as plt
from matplotlib import animation

import warnings

from IPython.display import clear_output, HTML, display


# ### –ü—Ä–æ–≤–µ–¥–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# In[2]:


plotly.offline.init_notebook_mode(connected=True)
warnings.filterwarnings('ignore')
get_ipython().run_line_magic('matplotlib', 'inline')
get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'retina'")


# ### –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å TransportEquationSolver

# In[16]:


class TransportEquationSolver:
    '''
    –ö–ª–∞—Å—Å –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞.
    –ü–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –≤
    –∫–∞—á–µ—Å—Ç–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ –∏ –µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
    —Ñ—É–Ω–∫—Ü–∏—è, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –Ω–æ–ª—å.
    '''
    state_functions = False
    
    def __init__(self, X_START=0, X_END=1, T_START=0, T_END=1,
                 N=100, M=100, error=0.00001):
        
        # –ó–∞–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∫–∏
        self.X_START = X_START
        self.X_END = X_END
        self.T_START = T_START
        self.T_END = T_END
        self.N = N
        self.M = self.N  # –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ, 
        #–ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–µ–ø–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ (–±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
        
        # –ó–∞–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ—Ç–æ–¥–∞ –ù—å—é—Ç–æ–Ω–∞
        self.error = error
        self.i_max = 10000
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –∏ —à–∞–≥–æ–≤ –ø–æ x –∏ t
        self.x = np.linspace(X_START, X_END, N)
        self.t = np.linspace(T_START, T_END, M)
        self.dx = self.x[1] - self.x[0]
        self.dt = self.t[1] - self.t[0]
            
    def initialize(self, C, C_integral , condition_initial, condition_border,
                   heterogeneity, heterogeneity_div):
        '''
        –ú–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é C, –µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é, –∞ —Ç–∞–∫ –∂–µ
        –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –≥—Ä–∞–Ω–∏—á–Ω–æ–µ —É—Å–ª–æ–≤–∏—è, –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏.
        '''
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
        self.C = C
        self.C_integral = C_integral
        self.condition_initial = condition_initial
        self.condition_border = condition_border
        self.heterogeneity = heterogeneity
        self.heterogeneity_div = heterogeneity_div
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã u –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ –Ω–∞—á–∞–ª—å–Ω—ã–º –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º–∏
        self.u = np.empty((self.N, self.M))
        
        self.u[0] = condition_border(self.t)               
        self.u.T[0] = condition_initial(self.x)
        
            
        # –ó–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ u(x, t) –≤ —Ç–æ—á–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —à–∞–±–ª–æ–Ω
        self.__u11 = self.u[0][0]
        self.__u12 = self.u[0][1]
        self.__u21 = self.u[1][0]
        
    def calculate_u(self):
        '''
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞. –í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è u(x, t) –Ω–∞ –≤—Å–µ–π —Å–µ—Ç–∫–µ.
        '''
        
        print('Calculating...')
        for n in range(1, self.N):
            clear_output(wait = True)
            print(f'Progress: {round(n/(self.N-1)*100)}%')
            for m in range(1, self.M):
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —à–∞–±–ª–æ–Ω
                self.__u11 = self.u[n-1][m-1]
                self.__u21 = self.u[n][m-1]
                self.__u12 = self.u[n-1][m]
                
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è u –≤ –Ω–æ–≤–æ–π —Ç–æ—á–∫–µ
                u_new = self.solve_newton(self.template, self.template_div, self.__u11, self.i_max)
                self.u[n][m] = u_new
        print('Done!')
        
    def template(self, u22):
        '''
        –ß–µ—Ç—ã—Ä–µ—Ö—Ç–æ—á–µ—á–Ω—ã–π —à–∞–±–ª–æ–Ω.
        '''
        
        return 0.5*(self.__u12 - self.__u11 + u22 -self.__u21) / self.dt + 0.5*(self.C_integral(u22) -
                                                                                 self.C_integral(self.__u12) + 
                                                                                 self.C_integral(self.__u21) - 
                                                                                 self.C_integral(self.__u11)) / self.dx
                
    def template_div(self, u22):
        '''
        –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —á–µ—Ç—ã—Ä–µ—Ö—Ç–æ—á–µ—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.
        '''
        
        return 0.5 / self.dt + 0.5*(self.C(u22)) / self.dx 
        
    def solve_newton(self, f, f_div, x0, i_max):
        '''
        –ß–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ –ù—å—é—Ç–æ–Ω–∞.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é, –µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é,
        –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π.
        '''
        
        x = x0
        i = 0
        while abs(f(x)) > self.error and i < i_max:
            x += (-f(x) / f_div(x))
            i+=1
        return x
    
    
    def characteristics(self, x, x0=0, t0=0, first=True):
        '''
        –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        first = True - t0 = 0
        first = False - x0 = 0
        '''
        
        if first:
            t0 = 0
            return 1/self.C(self.condition_initial(x0))*(x - x0)
        if not first:
            x0 = 0
            return 1/self.C(self.condition_border(t0))*x + t0
    
    def plot_characteristics(self, x_start, x_end, t_start, t_end, how_many):
        '''
        –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫. 
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —á–µ—Ç—ã—Ä–µ —á–∏—Å–ª–∞ - –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ x –∏ t,
        –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏,
        –∞ —Ç–∞–∫ –∂–µ —á–∏—Å–ª–æ –∫—Ä–∏–≤—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è.
        '''
        
        f, axs = plt.subplots(2,2,figsize=(14,7))
        f.suptitle('Characteristics plot')
        plt.subplot(1, 2, 1)
        plt.xlim(self.X_START, self.X_END)
        plt.ylim(t_start, t_end)
        plt.title('First family')
        plt.xlabel('x')
        plt.ylabel('t')
        x_for_char = np.linspace(x_start, x_end, how_many)
        t_for_char = np.linspace(t_start, t_end, how_many)
        for x0 in x_for_char:
            plt.plot(self.x, self.characteristics(self.x, x0 = x0))
        plt.subplot(1, 2, 2)
        plt.title('Second family')
        plt.xlim(self.X_START, self.X_END)
        plt.ylim(t_start, t_end)
        plt.xlabel('x')
        plt.ylabel('t')
        for t0 in t_for_char:
            plt.plot(self.x, self.characteristics(self.x, t0 = t0, first = False))
        
    def plot_conditions(self):
        '''
        –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏–π.
        '''
        
        f, axs = plt.subplots(2,2,figsize=(14,7))
        f.suptitle('Conditions plot', )
        plt.subplot(1, 2, 1)
        plt.title('Initial Condition')
        plt.xlabel('x')
        plt.ylabel('u')
        plt.plot(self.x, self.u.T[0][:])
        plt.subplot(1, 2, 2)
        plt.title('Border Condition')
        plt.xlabel('t')
        plt.ylabel('u')
        plt.plot(self.t, self.u[:][0])
        
    def visualise_evolution(self, filename = 'basic_animation'):
        '''
        –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ u(x, t),
        –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–µ –≤ .mp4 –≤–∏–¥–µ–æ—Ñ–∞–π–ª.
        '''
        
        fig = plt.figure(dpi = 200)
        ax = plt.axes(xlim=(self.X_START*0.9, self.X_END*1.1),
                      ylim=(np.min(self.u)*0.9, np.max(self.u)*1.1))
        
        ax.set_title('Evolution of u(x, t)')
        ax.set_ylabel('u(x, t)', fontsize = 12)
        ax.set_xlabel('x', fontsize = 12)

        line, = ax.plot([], [], lw=2)

        textvar = fig.text(0.15, 0.15, '', fontsize = 20)

        def init():
            line.set_data([], [])
            return line,

        def animate(i):
            x = self.x
            y = self.u.T[i]

            textvar.set_text(f't = {round(self.t[i], 1)}')
            line.set_data(x, y)
            return line,

        anim = animation.FuncAnimation(fig, animate, init_func=init,
                                   frames=self.N, interval=5000/self.N, blit=True)
        plt.close(fig)
        anim.save(filename + '.mp4', fps=30, extra_args=['-vcodec', 'libx264'])
        
        return anim
    
    def plot_u(self, filename='OMM_Task_1', online=True):
        '''
        –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç 3D –≥—Ä–∞—Ñ–∏–∫ —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
        '''
        
        x_, t_, u_ = self.x, self.t, self.u
        data = [go.Surface(x = x_, y = t_, z = u_.T, colorscale = 'YlGnBu')]
        # –ù–∞–≤–µ–¥–µ–º –∫—Ä–∞—Å–æ—Ç—É
        layout = go.Layout(
                    scene = dict(
                    xaxis = dict(
                        title='x',
                        gridcolor="rgb(255, 255, 255)",
                        zerolinecolor="rgb(255, 255, 255)",
                        showbackground=True,
                        backgroundcolor="rgb(200, 200, 230)"),
                        
                    yaxis = dict(
                        title='t',
                        gridcolor="rgb(255, 255, 255)",
                        zerolinecolor="rgb(255, 255, 255)",
                        showbackground=True,
                        backgroundcolor="rgb(230, 200,230)"),
                        
                    zaxis = dict(
                        title='u(x, t)',
                        gridcolor="rgb(255, 255, 255)",
                        zerolinecolor="rgb(255, 255, 255)",
                        showbackground=True,
                        backgroundcolor="rgb(230, 230,200)",),),
                    width=800, height=600, 
                    margin=dict(
                    r=20, b=10,
                    l=10, t=10)
                  )

        fig = go.Figure(data = data, layout = layout)
        if not online:
            plotly.offline.iplot(fig, filename = 'OMM_Task_1')  # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –≤–ª–µ—á–µ—Ç –∑–∞ —Å–æ–±–æ–π
                                        # –±–æ–ª—å—à–æ–π –≤–µ—Å –Ω–æ—É—Ç–±—É–∫–∞, –Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ—á—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ
        if online:
            py.iplot(fig, filename = 'OMM_Task_1')  # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–Ω–ª–∞–π–Ω - –º–∞–ª–µ–Ω—å–∫–∏–π –≤–µ—Å –Ω–æ—É—Ç–±—É–∫–∞, 
                                        # —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–ª–≥–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ


# ### –û–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏

# In[17]:


def C(u):
    return (2 + np.cos(u)) / (1 + 2*u + 1 + np.sin(u))**2

def C_integral(u):
    return np.arctan(2*u + np.sin(u) + 1)

def condition_initial(x):
    return np.cos(np.pi*x/2)

def condition_border(t):
    return 1 + 0.5*np.arctan(t)

def heterogeneity(u):
    return 0

def  heterogeneity_div(u):
    return 0


# ### –°–æ–∑–¥–∞–¥–∏–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TransportEquationSolver, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à—É –∑–∞–¥–∞—á—É.
# 

# In[18]:


solver_small = TransportEquationSolver(N = 100, M = 100)
solver_small.initialize(C, C_integral, condition_initial, condition_border, 
                            heterogeneity,  heterogeneity_div)


# ### –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

# In[6]:


solver_small.plot_characteristics(0, 1, 0, 20, 20)


# –ö–∞–∫ –≤–∏–¥–Ω–æ, –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–µ—Ç. 
# 
# –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ—Ç —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–æ–≥–æ –æ–ø—Ä–æ–∫–∏–¥—ã–≤–∞–Ω–∏—è –≤–æ–ª–Ω—ã, –∏ –≤–æ –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º–æ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω–æ—Å—Ç–Ω—É—é —Å—Ö–µ–º—É.
# 
# –í–æ–∑—å–º–µ–º 20 –∑–∞ –≤–µ—Ä–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É t –∏ —Å–æ–∑–¥–∞–¥–∏–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TransportEquationSolver —Å –Ω—É–∂–Ω—ã–º–∏ –Ω–∞–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

# In[19]:


solver = TransportEquationSolver(T_END = 20, N = 500, M = 500)
solver.initialize(C, C_integral, condition_initial, condition_border,
                  heterogeneity,  heterogeneity_div)


# ### –ü–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.

# In[20]:


solver.plot_conditions()


# ### –í—ã—á–∏—Å–ª–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ u(x, t) –≤–æ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö —Å–µ—Ç–∫–∏.

# In[21]:


solver.calculate_u()


# ### –ì—Ä–∞—Ñ–∏–∫ —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

# In[23]:


solver.plot_u()


# ### "–ö–∞—Ä—Ç–∞ –≤—ã—Å–æ—Ç" —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è

# In[ ]:


plt.figure(figsize = (10, 10))
plt.title('Height map of u(x, t)')
plt.imshow(u)


# ### –í–∏–¥–µ–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è

# –ß—Ç–æ–±—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º —à–∞–≥–æ–º –ø–æ —Å–µ—Ç–∫–µ.

# In[ ]:


solver_anim = TransportEquationSolver(N = 100, M = 100, T_END = 20)
solver_anim.initialize(C, C_integral, condition_initial, condition_border, 
                            heterogeneity,  heterogeneity_div)
solver_anim.calculate_u()


# In[ ]:


anim = solver_anim.visualise_evolution(filename = 'small_animation')
HTML(anim.to_jshtml())
plt.close()  # <-- –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –≥–ª—É–ø—ã–π –±–∞–≥, 
             #     –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç –Ω–µ–Ω—É–∂–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
HTML(anim.to_jshtml())


# In[ ]:


help(solver_anim)


# üòâ
